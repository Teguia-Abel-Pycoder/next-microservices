// schema.prisma - Updated with Transaction model
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id           BigInt       @id @default(autoincrement())
  name         String       @db.VarChar(255)
  gender       Gender
  description  String       @db.Text
  price        Float
  category     Category
  state        State
  color        String       @db.VarChar(100)
  brand        String       @db.VarChar(100)
  size         ArticleSize
  babySize     BabySize?
  childSize    ChildSize?
  adultSize    AdultSize?
  owner        String       @db.VarChar(100)
  boughtBy     String?      @db.VarChar(100)
  creationDate DateTime     @default(now())
  updatedDate  DateTime     @updatedAt
  images       String?      @db.Text // Made optional and increased size
  mainImage    String?      @db.Text // Made optional
  perishable   Boolean      @default(false)
  published    Boolean      @default(false)
  
  // Relations
  offers       Offer[]
  transactions Transaction[]
  
  @@index([owner])
  @@index([category])
  @@index([published])
  @@index([creationDate])
}

model Offer {
  id              BigInt   @id @default(autoincrement())
  articleId       BigInt
  articleName     String   @db.VarChar(255)
  articleCategory String   @db.VarChar(100)
  articleSize     String   @db.VarChar(50)
  price           Float
  seller          String   @db.VarChar(100)
  username        String   @db.VarChar(100) // buyer username
  status          Status   @default(PENDING)
  mainImage       String?  @db.Text
  createdDate     DateTime @default(now())
  updatedDate     DateTime @updatedAt
  
  // Relations
  article         Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  
  @@index([seller])
  @@index([username])
  @@index([status])
  @@index([articleId])
  @@unique([articleId, username]) // Prevent duplicate offers from same user
}

model Transaction {
  id                        BigInt            @id @default(autoincrement())
  offerId                   BigInt
  articleId                 BigInt
  buyerUsername             String            @db.VarChar(100)
  sellerUsername            String            @db.VarChar(100)
  amount                    Float
  status                    TransactionStatus @default(PAYMENT_PENDING)
  
  // Payment information
  paymentReference          String?           @db.VarChar(255)
  paymentConfirmedAt        DateTime?
  paymentReleasedAt         DateTime?
  paymentReleaseReference   String?           @db.VarChar(255)
  
  // Shipping information
  shippingAddress           String            @db.Text // JSON string
  trackingNumber            String?           @db.VarChar(255)
  carrier                   String?           @db.VarChar(100)
  estimatedDelivery         DateTime?
  shippedAt                 DateTime?
  deliveryConfirmedAt       DateTime?
  
  // Dispute information
  disputeReason             String?           @db.VarChar(100)
  disputeDescription        String?           @db.Text
  disputeOpenedBy           String?           @db.VarChar(100)
  disputeOpenedAt           DateTime?
  disputeResolvedAt         DateTime?
  disputeResolution         String?           @db.Text
  
  // Feedback
  buyerRating              Int?              // 1-5 stars
  buyerReview              String?           @db.VarChar(500)
  sellerRating             Int?              // 1-5 stars
  sellerReview             String?           @db.VarChar(500)
  
  // Timestamps
  createdDate              DateTime          @default(now())
  updatedDate              DateTime          @updatedAt
  
  // Relations
  offer                    Offer             @relation(fields: [offerId], references: [id], onDelete: Cascade)
  article                  Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@index([buyerUsername])
  @@index([sellerUsername])
  @@index([status])
  @@index([createdDate])
  @@index([offerId])
  @@index([articleId])
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum State {
  NEW
  USED
  GOOD
  FAIR
}

enum Status {
  PENDING
  DENIED
  ACCEPTED
  DONE
  CANCELLED
}

enum TransactionStatus {
  PAYMENT_PENDING
  PAYMENT_CONFIRMED
  SHIPPED
  COMPLETED
  DISPUTED
  CANCELLED
  REFUNDED
}

enum Category {
  PANTS
  SHIRTS
  PULLOVERS
  JACKETS
  TSHIRTS
  BLOUSES
  POLO
  CROP_TOPS
  HATS_CAPS
  SOCKS
  ACCESSORIES
  SHOES
  UNDERWEAR
  SWIMWEAR
}

enum ArticleSize {
  BABY
  CHILD
  ADULT
}

enum BabySize {
  THREE_MONTHS
  THREE_TO_SIX_MONTHS
  SIX_TO_NINE_MONTHS
  NINE_TO_TWELVE_MONTHS
  TWELVE_TO_EIGHTEEN_MONTHS
  EIGHTEEN_TO_TWENTY_FOUR_MONTHS
}

enum ChildSize {
  TWO_TO_FOUR_YEARS
  FOUR_TO_SIX_YEARS
  SIX_TO_EIGHT_YEARS
  EIGHT_TO_TEN_YEARS
  TEN_TO_TWELVE_YEARS
}

enum AdultSize {
  XS
  S
  M
  L
  XL
  XXL
  THREE_XL
  FOUR_XL
  FIVE_XL
}

model Notification {
  id            BigInt         @id @default(autoincrement())
  userId        String         @db.VarChar(100)
  type          NotificationType
  title         String         @db.VarChar(255)
  message       String         @db.Text
  data          Json?          // Store additional notification data
  read          Boolean        @default(false)
  createdDate   DateTime       @default(now())
  updatedDate   DateTime       @updatedAt
  
  @@index([userId])
  @@index([read])
  @@index([createdDate])
  @@index([type])
}

enum NotificationType {
  NEW_OFFER
  OFFER_UPDATED
  OFFER_ACCEPTED
  OFFER_DENIED
  OFFER_CANCELLED
  OFFER_CONCLUDED
  ARTICLE_SOLD
  SYSTEM_MESSAGE
  PAYMENT_CONFIRMED
  ITEM_SHIPPED
  PAYMENT_RELEASED
  TRANSACTION_COMPLETED
  TRANSACTION_DISPUTED
  DISPUTE_OPENED
}